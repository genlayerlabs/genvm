From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: kp2pml30 <kp2pml30@gmail.com>
Date: Wed, 18 Sep 2024 14:19:49 +0400
Subject: [PATCH] make fuel shared

---
 crates/cranelift/src/func_environ.rs        |  84 +++++++------
 crates/environ/src/vmoffsets.rs             |   4 +-
 crates/wasmtime/src/runtime.rs              |   1 +
 crates/wasmtime/src/runtime/func.rs         |   4 +-
 crates/wasmtime/src/runtime/store.rs        | 124 +++++++++++++++-----
 crates/wasmtime/src/runtime/vm/vmcontext.rs |   7 +-
 6 files changed, 151 insertions(+), 73 deletions(-)

diff --git a/crates/cranelift/src/func_environ.rs b/crates/cranelift/src/func_environ.rs
index fa13361..4cc69d6 100644
--- a/crates/cranelift/src/func_environ.rs
+++ b/crates/cranelift/src/func_environ.rs
@@ -116,7 +116,7 @@ pub struct FuncEnvironment<'module_environment> {
     /// fuel remaining to execute. If used this is modified frequently so it's
     /// stored locally as a variable instead of always referenced from the field
     /// in `*const VMRuntimeLimits`
-    fuel_var: cranelift_frontend::Variable,
+    //fuel_var: cranelift_frontend::Variable,
 
     /// A function-local variable which caches the value of `*const
     /// VMRuntimeLimits` for this function's vmctx argument. This pointer is stored
@@ -172,7 +172,7 @@ impl<'module_environment> FuncEnvironment<'module_environment> {
             builtin_functions,
             offsets: VMOffsets::new(isa.pointer_bytes(), &translation.module),
             tunables,
-            fuel_var: Variable::new(0),
+            //fuel_var: Variable::new(0),
             epoch_deadline_var: Variable::new(0),
             epoch_ptr_var: Variable::new(0),
             vmruntime_limits_ptr: ir::Value::reserved_value(),
@@ -301,8 +301,8 @@ impl<'module_environment> FuncEnvironment<'module_environment> {
         // `self.fuel_var` to make fuel modifications fast locally. This cache
         // is then periodically flushed to the Store-defined location in
         // `VMRuntimeLimits` later.
-        builder.declare_var(self.fuel_var, ir::types::I64);
-        self.fuel_load_into_var(builder);
+        //builder.declare_var(self.fuel_var, ir::types::I64);
+        //self.fuel_load_into_var(builder);
         self.fuel_check(builder);
     }
 
@@ -310,7 +310,8 @@ impl<'module_environment> FuncEnvironment<'module_environment> {
         // On exiting the function we need to be sure to save the fuel we have
         // cached locally in `self.fuel_var` back into the Store-defined
         // location.
-        self.fuel_save_from_var(builder);
+        let _ = builder;
+        //self.fuel_save_from_var(builder);
     }
 
     fn fuel_before_op(
@@ -362,7 +363,7 @@ impl<'module_environment> FuncEnvironment<'module_environment> {
             | Operator::ReturnCall { .. }
             | Operator::ReturnCallIndirect { .. } => {
                 self.fuel_increment_var(builder);
-                self.fuel_save_from_var(builder);
+                //self.fuel_save_from_var(builder);
             }
 
             // To ensure all code preceding a loop is only counted once we
@@ -419,7 +420,8 @@ impl<'module_environment> FuncEnvironment<'module_environment> {
         // function may have changed it.
         match op {
             Operator::Call { .. } | Operator::CallIndirect { .. } => {
-                self.fuel_load_into_var(builder);
+                let _ = builder;
+                //self.fuel_load_into_var(builder);
             }
             _ => {}
         }
@@ -433,38 +435,45 @@ impl<'module_environment> FuncEnvironment<'module_environment> {
             return;
         }
 
-        let fuel = builder.use_var(self.fuel_var);
-        let fuel = builder.ins().iadd_imm(fuel, consumption);
-        builder.def_var(self.fuel_var, fuel);
+        let fuel_addr = self.fuel_addr(builder);
+        let consumed_val = builder.ins().iconst(ir::types::I64, consumption);
+        builder.ins().atomic_rmw(ir::types::I64, ir::MemFlags::trusted(), ir::AtomicRmwOp::Add, fuel_addr, consumed_val);
+        //let fuel = builder.ins().iadd_imm(fuel, consumption);
+        //builder.def_var(self.fuel_var, fuel);
     }
 
     /// Loads the fuel consumption value from `VMRuntimeLimits` into `self.fuel_var`
-    fn fuel_load_into_var(&mut self, builder: &mut FunctionBuilder<'_>) {
-        let (addr, offset) = self.fuel_addr_offset();
-        let fuel = builder
-            .ins()
-            .load(ir::types::I64, ir::MemFlags::trusted(), addr, offset);
-        builder.def_var(self.fuel_var, fuel);
-    }
+    //fn fuel_load_into_var(&mut self, builder: &mut FunctionBuilder<'_>) {
+    //    let (addr, offset) = self.fuel_addr_offset();
+    //    let fuel = builder
+    //        .ins()
+    //        .load(ir::types::I64, ir::MemFlags::trusted(), addr, offset);
+    //    builder.def_var(self.fuel_var, fuel);
+    //}
 
     /// Stores the fuel consumption value from `self.fuel_var` into
     /// `VMRuntimeLimits`.
-    fn fuel_save_from_var(&mut self, builder: &mut FunctionBuilder<'_>) {
-        let (addr, offset) = self.fuel_addr_offset();
-        let fuel_consumed = builder.use_var(self.fuel_var);
-        builder
-            .ins()
-            .store(ir::MemFlags::trusted(), fuel_consumed, addr, offset);
-    }
+    //fn fuel_save_from_var(&mut self, builder: &mut FunctionBuilder<'_>) {
+    //    let (addr, offset) = self.fuel_addr_offset();
+    //    let fuel_consumed = builder.use_var(self.fuel_var);
+    //    builder
+    //        .ins()
+    //        .store(ir::MemFlags::trusted(), fuel_consumed, addr, offset);
+    //}
 
     /// Returns the `(address, offset)` of the fuel consumption within
     /// `VMRuntimeLimits`, used to perform loads/stores later.
-    fn fuel_addr_offset(&mut self) -> (ir::Value, ir::immediates::Offset32) {
+    //fn fuel_addr_offset(&mut self) -> (ir::Value, ir::immediates::Offset32) {
+    //    debug_assert!(!self.vmruntime_limits_ptr.is_reserved_value());
+    //    (
+    //        self.vmruntime_limits_ptr,
+    //        i32::from(self.offsets.ptr.vmruntime_limits_fuel_consumed()).into(),
+    //    )
+    //}
+
+    fn fuel_addr(&mut self, builder: &mut FunctionBuilder<'_>) -> ir::Value {
         debug_assert!(!self.vmruntime_limits_ptr.is_reserved_value());
-        (
-            self.vmruntime_limits_ptr,
-            i32::from(self.offsets.ptr.vmruntime_limits_fuel_consumed()).into(),
-        )
+        builder.ins().load(self.pointer_type(), MemFlags::trusted(), self.vmruntime_limits_ptr, self.offsets.ptr.vmruntime_limits_fuel_consumed_location())
     }
 
     /// Checks the amount of remaining, and if we've run out of fuel we call
@@ -481,7 +490,8 @@ impl<'module_environment> FuncEnvironment<'module_environment> {
         // Compare to see if our fuel is positive, and if so we ran out of gas.
         // Otherwise we can continue on like usual.
         let zero = builder.ins().iconst(ir::types::I64, 0);
-        let fuel = builder.use_var(self.fuel_var);
+        let fuel_addr = self.fuel_addr(builder);
+        let fuel = builder.ins().atomic_load(ir::types::I64, MemFlags::trusted(), fuel_addr);
         let cmp = builder
             .ins()
             .icmp(IntCC::SignedGreaterThanOrEqual, fuel, zero);
@@ -498,11 +508,11 @@ impl<'module_environment> FuncEnvironment<'module_environment> {
         // Note that we save/reload fuel around this since the out-of-gas
         // intrinsic may alter how much fuel is in the system.
         builder.switch_to_block(out_of_gas_block);
-        self.fuel_save_from_var(builder);
+        //self.fuel_save_from_var(builder);
         let out_of_gas = self.builtin_functions.out_of_gas(builder.func);
         let vmctx = self.vmctx_val(&mut builder.cursor());
         builder.ins().call(out_of_gas, &[vmctx]);
-        self.fuel_load_into_var(builder);
+        //self.fuel_load_into_var(builder);
         builder.ins().jump(continuation_block, &[]);
         builder.seal_block(continuation_block);
 
@@ -1536,9 +1546,9 @@ impl<'module_environment> cranelift_wasm::FuncEnvironment for FuncEnvironment<'m
     }
 
     fn after_locals(&mut self, num_locals: usize) {
-        self.fuel_var = Variable::new(num_locals);
-        self.epoch_deadline_var = Variable::new(num_locals + 1);
-        self.epoch_ptr_var = Variable::new(num_locals + 2);
+        //self.fuel_var = Variable::new(num_locals);
+        self.epoch_deadline_var = Variable::new(num_locals + 0);
+        self.epoch_ptr_var = Variable::new(num_locals + 1);
     }
 
     fn translate_table_grow(
@@ -2595,7 +2605,7 @@ impl<'module_environment> cranelift_wasm::FuncEnvironment for FuncEnvironment<'m
     ) -> WasmResult<()> {
         if self.tunables.consume_fuel {
             self.fuel_increment_var(builder);
-            self.fuel_save_from_var(builder);
+            //self.fuel_save_from_var(builder);
         }
         Ok(())
     }
@@ -2755,7 +2765,7 @@ impl<'module_environment> cranelift_wasm::FuncEnvironment for FuncEnvironment<'m
 
     fn fuel_before_unreachable(&mut self, builder: &mut FunctionBuilder) {
         self.fuel_increment_var(builder);
-        self.fuel_save_from_var(builder);
+        //self.fuel_save_from_var(builder);
     }
 
     fn are_floats_enabled(&self) -> bool {
diff --git a/crates/environ/src/vmoffsets.rs b/crates/environ/src/vmoffsets.rs
index 0868629..111af15 100644
--- a/crates/environ/src/vmoffsets.rs
+++ b/crates/environ/src/vmoffsets.rs
@@ -153,14 +153,14 @@ pub trait PtrSize {
 
     /// Return the offset of the `fuel_consumed` field of `VMRuntimeLimits`
     #[inline]
-    fn vmruntime_limits_fuel_consumed(&self) -> u8 {
+    fn vmruntime_limits_fuel_consumed_location(&self) -> u8 {
         self.size()
     }
 
     /// Return the offset of the `epoch_deadline` field of `VMRuntimeLimits`
     #[inline]
     fn vmruntime_limits_epoch_deadline(&self) -> u8 {
-        self.vmruntime_limits_fuel_consumed() + 8 // `stack_limit` is a pointer; `fuel_consumed` is an `i64`
+        self.vmruntime_limits_fuel_consumed_location() + self.size() // `stack_limit` is a pointer; `fuel_consumed` is a pointer
     }
 
     /// Return the offset of the `last_wasm_exit_fp` field of `VMRuntimeLimits`.
diff --git a/crates/wasmtime/src/runtime.rs b/crates/wasmtime/src/runtime.rs
index 0d8eaca..8c32009 100644
--- a/crates/wasmtime/src/runtime.rs
+++ b/crates/wasmtime/src/runtime.rs
@@ -53,6 +53,7 @@ pub use resources::*;
 pub use store::CallHookHandler;
 pub use store::{
     AsContext, AsContextMut, CallHook, Store, StoreContext, StoreContextMut, UpdateDeadline,
+    FuelDescriptor
 };
 pub use trap::*;
 pub use types::*;
diff --git a/crates/wasmtime/src/runtime/func.rs b/crates/wasmtime/src/runtime/func.rs
index c9fac03..933cbf2 100644
--- a/crates/wasmtime/src/runtime/func.rs
+++ b/crates/wasmtime/src/runtime/func.rs
@@ -2135,8 +2135,8 @@ impl<T> Caller<'_, T> {
     /// Set the amount of fuel in this store to be consumed when executing wasm code.
     ///
     /// For more information see [`Store::set_fuel`](crate::Store::set_fuel)
-    pub fn set_fuel(&mut self, fuel: u64) -> Result<()> {
-        self.store.set_fuel(fuel)
+    pub fn consume_fuel(&mut self, fuel: u64) -> Result<()> {
+        self.store.consume_fuel(fuel)
     }
 
     /// Configures this `Store` to yield while executing futures every N units of fuel.
diff --git a/crates/wasmtime/src/runtime/store.rs b/crates/wasmtime/src/runtime/store.rs
index 0efefef..a84233b 100644
--- a/crates/wasmtime/src/runtime/store.rs
+++ b/crates/wasmtime/src/runtime/store.rs
@@ -102,8 +102,9 @@ use core::num::NonZeroU64;
 use core::ops::{Deref, DerefMut};
 use core::pin::Pin;
 use core::ptr;
-use core::sync::atomic::AtomicU64;
+use core::sync::atomic::{AtomicI64, AtomicU64};
 use core::task::{Context, Poll};
+use std::sync::Mutex;
 
 mod context;
 pub use self::context::*;
@@ -210,6 +211,77 @@ impl CallHook {
     }
 }
 
+/// Struct to share fuel across storages
+pub struct FuelDescriptor {
+    injected: AtomicI64,
+    reserve: Mutex<u64>,
+}
+
+impl FuelDescriptor {
+    /// ctor
+    pub fn new(fuel: u64) -> Self {
+        Self {
+            injected: 0.into(),
+            reserve: Mutex::new(fuel),
+        }
+    }
+
+    /// inject some fuel from the reserve
+    pub fn refuel(&self) -> bool {
+        let Ok(mut lock) = self.reserve.lock() else { panic!("can't lock fuel") };
+        loop {
+            if *lock == 0 {
+                return false;
+            }
+            let val = lock.min(u32::max_value().into());
+            *lock -= val;
+            let val = val as i64;
+            let old_val = self.injected.fetch_sub(val, core::sync::atomic::Ordering::SeqCst);
+            if old_val - val < 0 {
+                return true;
+            }
+        }
+    }
+
+    /// get fuel
+    pub fn get_fuel(&self) -> u64 {
+        // can we do better?
+        let Ok(reserved) = self.reserve.lock() else { panic!("can't lock fuel") };
+        let a = self.injected.load(core::sync::atomic::Ordering::SeqCst);
+        (-a) as u64 + *reserved
+    }
+
+    /// consume fuel
+    pub fn consume_fuel(&self, mut amount: u64) {
+        use core::sync::atomic::Ordering;
+        {
+            let Ok(mut lock) = self.reserve.lock() else { panic!("can't lock fuel") };
+            let amount_consume = amount.min(*lock);
+            *lock -= amount_consume;
+            amount -= amount_consume;
+        }
+        if amount == 0 {
+            return;
+        }
+        let mut old = self.injected.load(Ordering::Relaxed);
+        loop {
+            // here reserve is empty, so if we ran out of injected we can just break --- there is no more fuel
+            if old >= 0 {
+                return;
+            }
+            let u64_flip_sign = |x: u64| {
+                x.reverse_bits().wrapping_add(1)
+            };
+            let old_as_pos = u64_flip_sign(unsafe { std::mem::transmute(old) });
+            let new_val: i64 = unsafe { std::mem::transmute(u64_flip_sign(old_as_pos - amount.min(old_as_pos))) };
+            match self.injected.compare_exchange_weak(old, new_val, Ordering::SeqCst, Ordering::Relaxed) {
+                Ok(_) => break,
+                Err(new_old) => old = new_old,
+            }
+        }
+    }
+}
+
 /// Internal contents of a `Store<T>` that live on the heap.
 ///
 /// The members of this struct are those that need to be generic over `T`, the
@@ -310,6 +382,8 @@ pub struct StoreOpaque {
     // within a `Store`.
     _marker: marker::PhantomPinned,
 
+    common_fuel: Arc<FuelDescriptor>,
+
     engine: Engine,
     runtime_limits: VMRuntimeLimits,
     instances: Vec<StoreInstance>,
@@ -340,7 +414,7 @@ pub struct StoreOpaque {
     // runtime_limits) here. The total amount of fuel is the runtime limits and reserve added
     // together. Then when we run out of gas, we inject the yield amount from the reserve
     // until the reserve is empty.
-    fuel_reserve: u64,
+    //fuel_reserve: u64,
     fuel_yield_interval: Option<NonZeroU64>,
     /// Indexed data within this `Store`, used to store information about
     /// globals, functions, memories, etc.
@@ -509,12 +583,13 @@ impl<T> Store<T> {
     /// The store will limit the number of instances, linear memories, and
     /// tables created to 10,000. This can be overridden with the
     /// [`Store::limiter`] configuration method.
-    pub fn new(engine: &Engine, data: T) -> Self {
+    pub fn new(engine: &Engine, common_fuel: Arc<FuelDescriptor>, data: T) -> Self {
         let pkey = engine.allocator().next_available_pkey();
 
         let mut inner = Box::new(StoreInner {
             inner: StoreOpaque {
                 _marker: marker::PhantomPinned,
+                common_fuel,
                 engine: engine.clone(),
                 runtime_limits: Default::default(),
                 instances: Vec::new(),
@@ -539,7 +614,7 @@ impl<T> Store<T> {
                     current_suspend: UnsafeCell::new(ptr::null_mut()),
                     current_poll_cx: UnsafeCell::new(ptr::null_mut()),
                 },
-                fuel_reserve: 0,
+                //fuel_reserve: 0,
                 fuel_yield_interval: None,
                 store_data: ManuallyDrop::new(StoreData::new()),
                 default_caller: InstanceHandle::null(),
@@ -559,6 +634,7 @@ impl<T> Store<T> {
             epoch_deadline_behavior: None,
             data: ManuallyDrop::new(data),
         });
+        inner.runtime_limits.fuel_consumed_location = core::cell::UnsafeCell::new(inner.common_fuel.injected.as_ptr() as usize);
 
         // Wasmtime uses the callee argument to host functions to learn about
         // the original pointer to the `Store` itself, allowing it to
@@ -872,8 +948,8 @@ impl<T> Store<T> {
     ///
     /// This function will return an error if fuel consumption is not enabled via
     /// [`Config::consume_fuel`](crate::Config::consume_fuel).
-    pub fn set_fuel(&mut self, fuel: u64) -> Result<()> {
-        self.inner.set_fuel(fuel)
+    pub fn consume_fuel(&mut self, fuel: u64) -> Result<()> {
+        self.inner.consume_fuel(fuel)
     }
 
     /// Configures a [`Store`] to yield execution of async WebAssembly code
@@ -1109,8 +1185,8 @@ impl<'a, T> StoreContextMut<'a, T> {
     /// Set the amount of fuel in this store.
     ///
     /// For more information see [`Store::set_fuel`]
-    pub fn set_fuel(&mut self, fuel: u64) -> Result<()> {
-        self.0.set_fuel(fuel)
+    pub fn consume_fuel(&mut self, fuel: u64) -> Result<()> {
+        self.0.consume_fuel(fuel)
     }
 
     /// Configures this `Store` to periodically yield while executing futures.
@@ -1799,32 +1875,19 @@ impl StoreOpaque {
             self.engine().tunables().consume_fuel,
             "fuel is not configured in this store"
         );
-        let injected_fuel = unsafe { *self.runtime_limits.fuel_consumed.get() };
-        Ok(get_fuel(injected_fuel, self.fuel_reserve))
+        Ok(self.common_fuel.get_fuel())
     }
 
-    fn refuel(&mut self) -> bool {
-        let injected_fuel = unsafe { &mut *self.runtime_limits.fuel_consumed.get() };
-        refuel(
-            injected_fuel,
-            &mut self.fuel_reserve,
-            self.fuel_yield_interval,
-        )
-    }
-
-    pub fn set_fuel(&mut self, fuel: u64) -> Result<()> {
+    pub fn consume_fuel(&self, fuel: u64) -> Result<()> {
         anyhow::ensure!(
             self.engine().tunables().consume_fuel,
             "fuel is not configured in this store"
         );
-        let injected_fuel = unsafe { &mut *self.runtime_limits.fuel_consumed.get() };
-        set_fuel(
-            injected_fuel,
-            &mut self.fuel_reserve,
-            self.fuel_yield_interval,
-            fuel,
-        );
-        Ok(())
+        Ok(self.common_fuel.consume_fuel(fuel))
+    }
+
+    fn refuel(&mut self) -> bool {
+        self.common_fuel.refuel()
     }
 
     pub fn fuel_async_yield_interval(&mut self, interval: Option<u64>) -> Result<()> {
@@ -1842,7 +1905,8 @@ impl StoreOpaque {
         );
         self.fuel_yield_interval = interval.and_then(|i| NonZeroU64::new(i));
         // Reset the fuel active + reserve states by resetting the amount.
-        self.set_fuel(self.get_fuel()?)
+        //self.set_fuel(self.get_fuel()?)
+        panic!("fuel yield interval disabled")
     }
 
     /// Yields execution to the caller on out-of-gas or epoch interruption.
@@ -2672,7 +2736,7 @@ impl<T> StoreInner<T> {
 
 impl<T: Default> Default for Store<T> {
     fn default() -> Store<T> {
-        Store::new(&Engine::default(), T::default())
+        Store::new(&Engine::default(), Arc::new(FuelDescriptor::new(u64::max_value())), T::default())
     }
 }
 
diff --git a/crates/wasmtime/src/runtime/vm/vmcontext.rs b/crates/wasmtime/src/runtime/vm/vmcontext.rs
index 77c2aa9..6b97679 100644
--- a/crates/wasmtime/src/runtime/vm/vmcontext.rs
+++ b/crates/wasmtime/src/runtime/vm/vmcontext.rs
@@ -762,7 +762,9 @@ pub struct VMRuntimeLimits {
     /// This field is typically negative and increments towards positive. Upon
     /// turning positive a wasm trap will be generated. This field is only
     /// modified if wasm is configured to consume fuel.
-    pub fuel_consumed: UnsafeCell<i64>,
+    //pub fuel_consumed: UnsafeCell<i64>,
+
+    pub fuel_consumed_location: UnsafeCell<usize>,
 
     /// Deadline epoch for interruption: if epoch-based interruption
     /// is enabled and the global (per engine) epoch counter is
@@ -824,7 +826,8 @@ impl Default for VMRuntimeLimits {
     fn default() -> VMRuntimeLimits {
         VMRuntimeLimits {
             stack_limit: UnsafeCell::new(usize::max_value()),
-            fuel_consumed: UnsafeCell::new(0),
+            //fuel_consumed: UnsafeCell::new(0),
+            fuel_consumed_location: UnsafeCell::new(0),
             epoch_deadline: UnsafeCell::new(0),
             last_wasm_exit_fp: UnsafeCell::new(0),
             last_wasm_exit_pc: UnsafeCell::new(0),
-- 
2.34.1

