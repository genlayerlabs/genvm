From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: kp2pml30 <kp2pml30@gmail.com>
Date: Thu, 12 Sep 2024 14:44:40 +0400
Subject: [PATCH] add export keyword

---
 source/8086-SSE/s_f32UIToCommonNaN.c  | 1 +
 source/8086-SSE/s_f64UIToCommonNaN.c  | 1 +
 source/8086/s_f32UIToCommonNaN.c      | 1 +
 source/8086/s_f64UIToCommonNaN.c      | 1 +
 source/ARM-VFPv2/s_f32UIToCommonNaN.c | 1 +
 source/ARM-VFPv2/s_f64UIToCommonNaN.c | 1 +
 source/bf16_to_f32.c                  | 1 +
 source/extF80M_to_f32.c               | 2 ++
 source/extF80M_to_f64.c               | 2 ++
 source/extF80_to_f32.c                | 1 +
 source/extF80_to_f64.c                | 1 +
 source/f128M_to_f32.c                 | 2 ++
 source/f128M_to_f64.c                 | 2 ++
 source/f128_to_f32.c                  | 1 +
 source/f128_to_f64.c                  | 1 +
 source/f16_to_f32.c                   | 1 +
 source/f16_to_f64.c                   | 1 +
 source/f32_add.c                      | 1 +
 source/f32_div.c                      | 1 +
 source/f32_eq.c                       | 1 +
 source/f32_eq_signaling.c             | 1 +
 source/f32_isSignalingNaN.c           | 1 +
 source/f32_le.c                       | 1 +
 source/f32_le_quiet.c                 | 1 +
 source/f32_lt.c                       | 1 +
 source/f32_lt_quiet.c                 | 1 +
 source/f32_mul.c                      | 1 +
 source/f32_mulAdd.c                   | 1 +
 source/f32_rem.c                      | 1 +
 source/f32_roundToInt.c               | 1 +
 source/f32_sqrt.c                     | 1 +
 source/f32_sub.c                      | 1 +
 source/f32_to_bf16.c                  | 1 +
 source/f32_to_extF80.c                | 1 +
 source/f32_to_extF80M.c               | 2 ++
 source/f32_to_f128.c                  | 1 +
 source/f32_to_f128M.c                 | 2 ++
 source/f32_to_f16.c                   | 1 +
 source/f32_to_f64.c                   | 1 +
 source/f32_to_i32.c                   | 1 +
 source/f32_to_i32_r_minMag.c          | 1 +
 source/f32_to_i64.c                   | 1 +
 source/f32_to_i64_r_minMag.c          | 1 +
 source/f32_to_ui32.c                  | 1 +
 source/f32_to_ui32_r_minMag.c         | 1 +
 source/f32_to_ui64.c                  | 1 +
 source/f32_to_ui64_r_minMag.c         | 1 +
 source/f64_add.c                      | 1 +
 source/f64_div.c                      | 1 +
 source/f64_eq.c                       | 1 +
 source/f64_eq_signaling.c             | 1 +
 source/f64_isSignalingNaN.c           | 1 +
 source/f64_le.c                       | 1 +
 source/f64_le_quiet.c                 | 1 +
 source/f64_lt.c                       | 1 +
 source/f64_lt_quiet.c                 | 1 +
 source/f64_mul.c                      | 1 +
 source/f64_mulAdd.c                   | 1 +
 source/f64_rem.c                      | 1 +
 source/f64_roundToInt.c               | 1 +
 source/f64_sqrt.c                     | 1 +
 source/f64_sub.c                      | 1 +
 source/f64_to_extF80.c                | 1 +
 source/f64_to_extF80M.c               | 2 ++
 source/f64_to_f128.c                  | 1 +
 source/f64_to_f128M.c                 | 2 ++
 source/f64_to_f16.c                   | 1 +
 source/f64_to_f32.c                   | 1 +
 source/f64_to_i32.c                   | 1 +
 source/f64_to_i32_r_minMag.c          | 1 +
 source/f64_to_i64.c                   | 1 +
 source/f64_to_i64_r_minMag.c          | 1 +
 source/f64_to_ui32.c                  | 1 +
 source/f64_to_ui32_r_minMag.c         | 1 +
 source/f64_to_ui64.c                  | 1 +
 source/f64_to_ui64_r_minMag.c         | 1 +
 source/i32_to_f32.c                   | 1 +
 source/i32_to_f64.c                   | 1 +
 source/i64_to_f32.c                   | 1 +
 source/i64_to_f64.c                   | 1 +
 source/ui32_to_f32.c                  | 1 +
 source/ui32_to_f64.c                  | 1 +
 source/ui64_to_f32.c                  | 1 +
 source/ui64_to_f64.c                  | 1 +
 84 files changed, 92 insertions(+)

diff --git a/source/8086-SSE/s_f32UIToCommonNaN.c b/source/8086-SSE/s_f32UIToCommonNaN.c
index f4734db..55a4576 100644
--- a/source/8086-SSE/s_f32UIToCommonNaN.c
+++ b/source/8086-SSE/s_f32UIToCommonNaN.c
@@ -45,6 +45,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 | location pointed to by `zPtr'.  If the NaN is a signaling NaN, the invalid
 | exception is raised.
 *----------------------------------------------------------------------------*/
+export
 void softfloat_f32UIToCommonNaN( uint_fast32_t uiA, struct commonNaN *zPtr )
 {
 
diff --git a/source/8086-SSE/s_f64UIToCommonNaN.c b/source/8086-SSE/s_f64UIToCommonNaN.c
index 9a481a7..2a981ad 100644
--- a/source/8086-SSE/s_f64UIToCommonNaN.c
+++ b/source/8086-SSE/s_f64UIToCommonNaN.c
@@ -45,6 +45,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 | location pointed to by `zPtr'.  If the NaN is a signaling NaN, the invalid
 | exception is raised.
 *----------------------------------------------------------------------------*/
+export
 void softfloat_f64UIToCommonNaN( uint_fast64_t uiA, struct commonNaN *zPtr )
 {
 
diff --git a/source/8086/s_f32UIToCommonNaN.c b/source/8086/s_f32UIToCommonNaN.c
index f4734db..55a4576 100644
--- a/source/8086/s_f32UIToCommonNaN.c
+++ b/source/8086/s_f32UIToCommonNaN.c
@@ -45,6 +45,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 | location pointed to by `zPtr'.  If the NaN is a signaling NaN, the invalid
 | exception is raised.
 *----------------------------------------------------------------------------*/
+export
 void softfloat_f32UIToCommonNaN( uint_fast32_t uiA, struct commonNaN *zPtr )
 {
 
diff --git a/source/8086/s_f64UIToCommonNaN.c b/source/8086/s_f64UIToCommonNaN.c
index 9a481a7..2a981ad 100644
--- a/source/8086/s_f64UIToCommonNaN.c
+++ b/source/8086/s_f64UIToCommonNaN.c
@@ -45,6 +45,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 | location pointed to by `zPtr'.  If the NaN is a signaling NaN, the invalid
 | exception is raised.
 *----------------------------------------------------------------------------*/
+export
 void softfloat_f64UIToCommonNaN( uint_fast64_t uiA, struct commonNaN *zPtr )
 {
 
diff --git a/source/ARM-VFPv2/s_f32UIToCommonNaN.c b/source/ARM-VFPv2/s_f32UIToCommonNaN.c
index 249e478..dd1a5a0 100644
--- a/source/ARM-VFPv2/s_f32UIToCommonNaN.c
+++ b/source/ARM-VFPv2/s_f32UIToCommonNaN.c
@@ -45,6 +45,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 | location pointed to by 'zPtr'.  If the NaN is a signaling NaN, the invalid
 | exception is raised.
 *----------------------------------------------------------------------------*/
+export
 void softfloat_f32UIToCommonNaN( uint_fast32_t uiA, struct commonNaN *zPtr )
 {
 
diff --git a/source/ARM-VFPv2/s_f64UIToCommonNaN.c b/source/ARM-VFPv2/s_f64UIToCommonNaN.c
index adca2d0..3ddd7e0 100644
--- a/source/ARM-VFPv2/s_f64UIToCommonNaN.c
+++ b/source/ARM-VFPv2/s_f64UIToCommonNaN.c
@@ -45,6 +45,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 | location pointed to by 'zPtr'.  If the NaN is a signaling NaN, the invalid
 | exception is raised.
 *----------------------------------------------------------------------------*/
+export
 void softfloat_f64UIToCommonNaN( uint_fast64_t uiA, struct commonNaN *zPtr )
 {
 
diff --git a/source/bf16_to_f32.c b/source/bf16_to_f32.c
index b86482c..a882160 100644
--- a/source/bf16_to_f32.c
+++ b/source/bf16_to_f32.c
@@ -41,6 +41,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include "specialize.h"
 #include "softfloat.h"
 
+export
 float32_t bf16_to_f32( bfloat16_t a )
 {
     union ui16_bf16 uA;
diff --git a/source/extF80M_to_f32.c b/source/extF80M_to_f32.c
index bb1166f..7db07a1 100644
--- a/source/extF80M_to_f32.c
+++ b/source/extF80M_to_f32.c
@@ -43,6 +43,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
 #ifdef SOFTFLOAT_FAST_INT64
 
+export
 float32_t extF80M_to_f32( const extFloat80_t *aPtr )
 {
 
@@ -52,6 +53,7 @@ float32_t extF80M_to_f32( const extFloat80_t *aPtr )
 
 #else
 
+export
 float32_t extF80M_to_f32( const extFloat80_t *aPtr )
 {
     const struct extFloat80M *aSPtr;
diff --git a/source/extF80M_to_f64.c b/source/extF80M_to_f64.c
index 696255f..c1c2b81 100644
--- a/source/extF80M_to_f64.c
+++ b/source/extF80M_to_f64.c
@@ -43,6 +43,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
 #ifdef SOFTFLOAT_FAST_INT64
 
+export
 float64_t extF80M_to_f64( const extFloat80_t *aPtr )
 {
 
@@ -52,6 +53,7 @@ float64_t extF80M_to_f64( const extFloat80_t *aPtr )
 
 #else
 
+export
 float64_t extF80M_to_f64( const extFloat80_t *aPtr )
 {
     const struct extFloat80M *aSPtr;
diff --git a/source/extF80_to_f32.c b/source/extF80_to_f32.c
index 357f56e..6193b57 100644
--- a/source/extF80_to_f32.c
+++ b/source/extF80_to_f32.c
@@ -41,6 +41,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include "specialize.h"
 #include "softfloat.h"
 
+export
 float32_t extF80_to_f32( extFloat80_t a )
 {
     union { struct extFloat80M s; extFloat80_t f; } uA;
diff --git a/source/extF80_to_f64.c b/source/extF80_to_f64.c
index c387399..ed114d6 100644
--- a/source/extF80_to_f64.c
+++ b/source/extF80_to_f64.c
@@ -41,6 +41,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include "specialize.h"
 #include "softfloat.h"
 
+export
 float64_t extF80_to_f64( extFloat80_t a )
 {
     union { struct extFloat80M s; extFloat80_t f; } uA;
diff --git a/source/f128M_to_f32.c b/source/f128M_to_f32.c
index 8b73de0..e98b953 100644
--- a/source/f128M_to_f32.c
+++ b/source/f128M_to_f32.c
@@ -43,6 +43,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
 #ifdef SOFTFLOAT_FAST_INT64
 
+export
 float32_t f128M_to_f32( const float128_t *aPtr )
 {
 
@@ -52,6 +53,7 @@ float32_t f128M_to_f32( const float128_t *aPtr )
 
 #else
 
+export
 float32_t f128M_to_f32( const float128_t *aPtr )
 {
     const uint32_t *aWPtr;
diff --git a/source/f128M_to_f64.c b/source/f128M_to_f64.c
index 1cddd34..389fe8a 100644
--- a/source/f128M_to_f64.c
+++ b/source/f128M_to_f64.c
@@ -43,6 +43,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
 #ifdef SOFTFLOAT_FAST_INT64
 
+export
 float64_t f128M_to_f64( const float128_t *aPtr )
 {
 
@@ -52,6 +53,7 @@ float64_t f128M_to_f64( const float128_t *aPtr )
 
 #else
 
+export
 float64_t f128M_to_f64( const float128_t *aPtr )
 {
     const uint32_t *aWPtr;
diff --git a/source/f128_to_f32.c b/source/f128_to_f32.c
index c10105f..893edc3 100644
--- a/source/f128_to_f32.c
+++ b/source/f128_to_f32.c
@@ -41,6 +41,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include "specialize.h"
 #include "softfloat.h"
 
+export
 float32_t f128_to_f32( float128_t a )
 {
     union ui128_f128 uA;
diff --git a/source/f128_to_f64.c b/source/f128_to_f64.c
index 76da76c..44901d5 100644
--- a/source/f128_to_f64.c
+++ b/source/f128_to_f64.c
@@ -41,6 +41,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include "specialize.h"
 #include "softfloat.h"
 
+export
 float64_t f128_to_f64( float128_t a )
 {
     union ui128_f128 uA;
diff --git a/source/f16_to_f32.c b/source/f16_to_f32.c
index c58208a..ac26250 100644
--- a/source/f16_to_f32.c
+++ b/source/f16_to_f32.c
@@ -41,6 +41,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include "specialize.h"
 #include "softfloat.h"
 
+export
 float32_t f16_to_f32( float16_t a )
 {
     union ui16_f16 uA;
diff --git a/source/f16_to_f64.c b/source/f16_to_f64.c
index dd85d33..74e962c 100644
--- a/source/f16_to_f64.c
+++ b/source/f16_to_f64.c
@@ -41,6 +41,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include "specialize.h"
 #include "softfloat.h"
 
+export
 float64_t f16_to_f64( float16_t a )
 {
     union ui16_f16 uA;
diff --git a/source/f32_add.c b/source/f32_add.c
index f59ac0a..8310777 100644
--- a/source/f32_add.c
+++ b/source/f32_add.c
@@ -40,6 +40,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include "internals.h"
 #include "softfloat.h"
 
+export
 float32_t f32_add( float32_t a, float32_t b )
 {
     union ui32_f32 uA;
diff --git a/source/f32_div.c b/source/f32_div.c
index 8d44479..d439e73 100644
--- a/source/f32_div.c
+++ b/source/f32_div.c
@@ -41,6 +41,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include "specialize.h"
 #include "softfloat.h"
 
+export
 float32_t f32_div( float32_t a, float32_t b )
 {
     union ui32_f32 uA;
diff --git a/source/f32_eq.c b/source/f32_eq.c
index 316fe6a..43ff018 100644
--- a/source/f32_eq.c
+++ b/source/f32_eq.c
@@ -41,6 +41,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include "specialize.h"
 #include "softfloat.h"
 
+export
 bool f32_eq( float32_t a, float32_t b )
 {
     union ui32_f32 uA;
diff --git a/source/f32_eq_signaling.c b/source/f32_eq_signaling.c
index 03395f3..11fd05e 100644
--- a/source/f32_eq_signaling.c
+++ b/source/f32_eq_signaling.c
@@ -40,6 +40,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include "internals.h"
 #include "softfloat.h"
 
+export
 bool f32_eq_signaling( float32_t a, float32_t b )
 {
     union ui32_f32 uA;
diff --git a/source/f32_isSignalingNaN.c b/source/f32_isSignalingNaN.c
index d98cc9b..464e1c6 100644
--- a/source/f32_isSignalingNaN.c
+++ b/source/f32_isSignalingNaN.c
@@ -40,6 +40,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include "specialize.h"
 #include "softfloat.h"
 
+export
 bool f32_isSignalingNaN( float32_t a )
 {
     union ui32_f32 uA;
diff --git a/source/f32_le.c b/source/f32_le.c
index 83a3007..96812f2 100644
--- a/source/f32_le.c
+++ b/source/f32_le.c
@@ -40,6 +40,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include "internals.h"
 #include "softfloat.h"
 
+export
 bool f32_le( float32_t a, float32_t b )
 {
     union ui32_f32 uA;
diff --git a/source/f32_le_quiet.c b/source/f32_le_quiet.c
index 329fe39..74548b3 100644
--- a/source/f32_le_quiet.c
+++ b/source/f32_le_quiet.c
@@ -41,6 +41,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include "specialize.h"
 #include "softfloat.h"
 
+export
 bool f32_le_quiet( float32_t a, float32_t b )
 {
     union ui32_f32 uA;
diff --git a/source/f32_lt.c b/source/f32_lt.c
index ddc1804..e9d3341 100644
--- a/source/f32_lt.c
+++ b/source/f32_lt.c
@@ -40,6 +40,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include "internals.h"
 #include "softfloat.h"
 
+export
 bool f32_lt( float32_t a, float32_t b )
 {
     union ui32_f32 uA;
diff --git a/source/f32_lt_quiet.c b/source/f32_lt_quiet.c
index 59c9cf1..4f9bf71 100644
--- a/source/f32_lt_quiet.c
+++ b/source/f32_lt_quiet.c
@@ -41,6 +41,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include "specialize.h"
 #include "softfloat.h"
 
+export
 bool f32_lt_quiet( float32_t a, float32_t b )
 {
     union ui32_f32 uA;
diff --git a/source/f32_mul.c b/source/f32_mul.c
index b1f8ec0..a85f9bb 100644
--- a/source/f32_mul.c
+++ b/source/f32_mul.c
@@ -41,6 +41,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include "specialize.h"
 #include "softfloat.h"
 
+export
 float32_t f32_mul( float32_t a, float32_t b )
 {
     union ui32_f32 uA;
diff --git a/source/f32_mulAdd.c b/source/f32_mulAdd.c
index b77777e..a1f24dd 100644
--- a/source/f32_mulAdd.c
+++ b/source/f32_mulAdd.c
@@ -39,6 +39,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include "internals.h"
 #include "softfloat.h"
 
+export
 float32_t f32_mulAdd( float32_t a, float32_t b, float32_t c )
 {
     union ui32_f32 uA;
diff --git a/source/f32_rem.c b/source/f32_rem.c
index 2d74c8c..ac8a940 100644
--- a/source/f32_rem.c
+++ b/source/f32_rem.c
@@ -41,6 +41,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include "specialize.h"
 #include "softfloat.h"
 
+export
 float32_t f32_rem( float32_t a, float32_t b )
 {
     union ui32_f32 uA;
diff --git a/source/f32_roundToInt.c b/source/f32_roundToInt.c
index 801a769..9b73be3 100644
--- a/source/f32_roundToInt.c
+++ b/source/f32_roundToInt.c
@@ -41,6 +41,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include "specialize.h"
 #include "softfloat.h"
 
+export
 float32_t f32_roundToInt( float32_t a, uint_fast8_t roundingMode, bool exact )
 {
     union ui32_f32 uA;
diff --git a/source/f32_sqrt.c b/source/f32_sqrt.c
index 9c6a998..a5cdc39 100644
--- a/source/f32_sqrt.c
+++ b/source/f32_sqrt.c
@@ -41,6 +41,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include "specialize.h"
 #include "softfloat.h"
 
+export
 float32_t f32_sqrt( float32_t a )
 {
     union ui32_f32 uA;
diff --git a/source/f32_sub.c b/source/f32_sub.c
index edbcd2f..be25fad 100644
--- a/source/f32_sub.c
+++ b/source/f32_sub.c
@@ -40,6 +40,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include "internals.h"
 #include "softfloat.h"
 
+export
 float32_t f32_sub( float32_t a, float32_t b )
 {
     union ui32_f32 uA;
diff --git a/source/f32_to_bf16.c b/source/f32_to_bf16.c
index 6f81493..7b0ce46 100644
--- a/source/f32_to_bf16.c
+++ b/source/f32_to_bf16.c
@@ -44,6 +44,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include <inttypes.h>
 #include <stdio.h>
 
+export
 bfloat16_t f32_to_bf16( float32_t a )
 {
     union ui32_f32 uA;
diff --git a/source/f32_to_extF80.c b/source/f32_to_extF80.c
index 8d35457..3fa9b3c 100644
--- a/source/f32_to_extF80.c
+++ b/source/f32_to_extF80.c
@@ -41,6 +41,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include "specialize.h"
 #include "softfloat.h"
 
+export
 extFloat80_t f32_to_extF80( float32_t a )
 {
     union ui32_f32 uA;
diff --git a/source/f32_to_extF80M.c b/source/f32_to_extF80M.c
index 03580fd..e0b0958 100644
--- a/source/f32_to_extF80M.c
+++ b/source/f32_to_extF80M.c
@@ -43,6 +43,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
 #ifdef SOFTFLOAT_FAST_INT64
 
+export
 void f32_to_extF80M( float32_t a, extFloat80_t *zPtr )
 {
 
@@ -52,6 +53,7 @@ void f32_to_extF80M( float32_t a, extFloat80_t *zPtr )
 
 #else
 
+export
 void f32_to_extF80M( float32_t a, extFloat80_t *zPtr )
 {
     struct extFloat80M *zSPtr;
diff --git a/source/f32_to_f128.c b/source/f32_to_f128.c
index ee0b414..dfc278c 100644
--- a/source/f32_to_f128.c
+++ b/source/f32_to_f128.c
@@ -41,6 +41,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include "specialize.h"
 #include "softfloat.h"
 
+export
 float128_t f32_to_f128( float32_t a )
 {
     union ui32_f32 uA;
diff --git a/source/f32_to_f128M.c b/source/f32_to_f128M.c
index cd3ad69..bd71d27 100644
--- a/source/f32_to_f128M.c
+++ b/source/f32_to_f128M.c
@@ -43,6 +43,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
 #ifdef SOFTFLOAT_FAST_INT64
 
+export
 void f32_to_f128M( float32_t a, float128_t *zPtr )
 {
 
@@ -52,6 +53,7 @@ void f32_to_f128M( float32_t a, float128_t *zPtr )
 
 #else
 
+export
 void f32_to_f128M( float32_t a, float128_t *zPtr )
 {
     uint32_t *zWPtr;
diff --git a/source/f32_to_f16.c b/source/f32_to_f16.c
index 45005fe..49a573d 100644
--- a/source/f32_to_f16.c
+++ b/source/f32_to_f16.c
@@ -41,6 +41,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include "specialize.h"
 #include "softfloat.h"
 
+export
 float16_t f32_to_f16( float32_t a )
 {
     union ui32_f32 uA;
diff --git a/source/f32_to_f64.c b/source/f32_to_f64.c
index 6cd08ed..b508b5e 100644
--- a/source/f32_to_f64.c
+++ b/source/f32_to_f64.c
@@ -41,6 +41,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include "specialize.h"
 #include "softfloat.h"
 
+export
 float64_t f32_to_f64( float32_t a )
 {
     union ui32_f32 uA;
diff --git a/source/f32_to_i32.c b/source/f32_to_i32.c
index 241ab8e..57c796c 100644
--- a/source/f32_to_i32.c
+++ b/source/f32_to_i32.c
@@ -41,6 +41,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include "specialize.h"
 #include "softfloat.h"
 
+export
 int_fast32_t f32_to_i32( float32_t a, uint_fast8_t roundingMode, bool exact )
 {
     union ui32_f32 uA;
diff --git a/source/f32_to_i32_r_minMag.c b/source/f32_to_i32_r_minMag.c
index f8134f4..c9d9280 100644
--- a/source/f32_to_i32_r_minMag.c
+++ b/source/f32_to_i32_r_minMag.c
@@ -41,6 +41,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include "specialize.h"
 #include "softfloat.h"
 
+export
 int_fast32_t f32_to_i32_r_minMag( float32_t a, bool exact )
 {
     union ui32_f32 uA;
diff --git a/source/f32_to_i64.c b/source/f32_to_i64.c
index 816bc7b..aa33fd5 100644
--- a/source/f32_to_i64.c
+++ b/source/f32_to_i64.c
@@ -41,6 +41,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include "specialize.h"
 #include "softfloat.h"
 
+export
 int_fast64_t f32_to_i64( float32_t a, uint_fast8_t roundingMode, bool exact )
 {
     union ui32_f32 uA;
diff --git a/source/f32_to_i64_r_minMag.c b/source/f32_to_i64_r_minMag.c
index 346f6b8..d77b016 100644
--- a/source/f32_to_i64_r_minMag.c
+++ b/source/f32_to_i64_r_minMag.c
@@ -41,6 +41,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include "specialize.h"
 #include "softfloat.h"
 
+export
 int_fast64_t f32_to_i64_r_minMag( float32_t a, bool exact )
 {
     union ui32_f32 uA;
diff --git a/source/f32_to_ui32.c b/source/f32_to_ui32.c
index 32d9eac..511e8ae 100644
--- a/source/f32_to_ui32.c
+++ b/source/f32_to_ui32.c
@@ -41,6 +41,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include "specialize.h"
 #include "softfloat.h"
 
+export
 uint_fast32_t f32_to_ui32( float32_t a, uint_fast8_t roundingMode, bool exact )
 {
     union ui32_f32 uA;
diff --git a/source/f32_to_ui32_r_minMag.c b/source/f32_to_ui32_r_minMag.c
index a90ef92..6af9993 100644
--- a/source/f32_to_ui32_r_minMag.c
+++ b/source/f32_to_ui32_r_minMag.c
@@ -41,6 +41,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include "specialize.h"
 #include "softfloat.h"
 
+export
 uint_fast32_t f32_to_ui32_r_minMag( float32_t a, bool exact )
 {
     union ui32_f32 uA;
diff --git a/source/f32_to_ui64.c b/source/f32_to_ui64.c
index 16e608a..7b60e19 100644
--- a/source/f32_to_ui64.c
+++ b/source/f32_to_ui64.c
@@ -41,6 +41,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include "specialize.h"
 #include "softfloat.h"
 
+export
 uint_fast64_t f32_to_ui64( float32_t a, uint_fast8_t roundingMode, bool exact )
 {
     union ui32_f32 uA;
diff --git a/source/f32_to_ui64_r_minMag.c b/source/f32_to_ui64_r_minMag.c
index 69e0064..479de2e 100644
--- a/source/f32_to_ui64_r_minMag.c
+++ b/source/f32_to_ui64_r_minMag.c
@@ -41,6 +41,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include "specialize.h"
 #include "softfloat.h"
 
+export
 uint_fast64_t f32_to_ui64_r_minMag( float32_t a, bool exact )
 {
     union ui32_f32 uA;
diff --git a/source/f64_add.c b/source/f64_add.c
index 878f6da..da74bff 100644
--- a/source/f64_add.c
+++ b/source/f64_add.c
@@ -40,6 +40,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include "internals.h"
 #include "softfloat.h"
 
+export
 float64_t f64_add( float64_t a, float64_t b )
 {
     union ui64_f64 uA;
diff --git a/source/f64_div.c b/source/f64_div.c
index 7f5eddd..4ebce34 100644
--- a/source/f64_div.c
+++ b/source/f64_div.c
@@ -41,6 +41,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include "specialize.h"
 #include "softfloat.h"
 
+export
 float64_t f64_div( float64_t a, float64_t b )
 {
     union ui64_f64 uA;
diff --git a/source/f64_eq.c b/source/f64_eq.c
index e075c02..b854081 100644
--- a/source/f64_eq.c
+++ b/source/f64_eq.c
@@ -41,6 +41,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include "specialize.h"
 #include "softfloat.h"
 
+export
 bool f64_eq( float64_t a, float64_t b )
 {
     union ui64_f64 uA;
diff --git a/source/f64_eq_signaling.c b/source/f64_eq_signaling.c
index d7e89a2..28bc4ec 100644
--- a/source/f64_eq_signaling.c
+++ b/source/f64_eq_signaling.c
@@ -40,6 +40,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include "internals.h"
 #include "softfloat.h"
 
+export
 bool f64_eq_signaling( float64_t a, float64_t b )
 {
     union ui64_f64 uA;
diff --git a/source/f64_isSignalingNaN.c b/source/f64_isSignalingNaN.c
index 5e1411f..5b9aea1 100644
--- a/source/f64_isSignalingNaN.c
+++ b/source/f64_isSignalingNaN.c
@@ -40,6 +40,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include "specialize.h"
 #include "softfloat.h"
 
+export
 bool f64_isSignalingNaN( float64_t a )
 {
     union ui64_f64 uA;
diff --git a/source/f64_le.c b/source/f64_le.c
index a96808f..e3a5087 100644
--- a/source/f64_le.c
+++ b/source/f64_le.c
@@ -40,6 +40,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include "internals.h"
 #include "softfloat.h"
 
+export
 bool f64_le( float64_t a, float64_t b )
 {
     union ui64_f64 uA;
diff --git a/source/f64_le_quiet.c b/source/f64_le_quiet.c
index 942afba..54c8efd 100644
--- a/source/f64_le_quiet.c
+++ b/source/f64_le_quiet.c
@@ -41,6 +41,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include "specialize.h"
 #include "softfloat.h"
 
+export
 bool f64_le_quiet( float64_t a, float64_t b )
 {
     union ui64_f64 uA;
diff --git a/source/f64_lt.c b/source/f64_lt.c
index d9cf5aa..f56cd22 100644
--- a/source/f64_lt.c
+++ b/source/f64_lt.c
@@ -40,6 +40,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include "internals.h"
 #include "softfloat.h"
 
+export
 bool f64_lt( float64_t a, float64_t b )
 {
     union ui64_f64 uA;
diff --git a/source/f64_lt_quiet.c b/source/f64_lt_quiet.c
index 89d30bc..b2c2ab4 100644
--- a/source/f64_lt_quiet.c
+++ b/source/f64_lt_quiet.c
@@ -41,6 +41,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include "specialize.h"
 #include "softfloat.h"
 
+export
 bool f64_lt_quiet( float64_t a, float64_t b )
 {
     union ui64_f64 uA;
diff --git a/source/f64_mul.c b/source/f64_mul.c
index 38bdc85..12689fc 100644
--- a/source/f64_mul.c
+++ b/source/f64_mul.c
@@ -41,6 +41,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include "specialize.h"
 #include "softfloat.h"
 
+export
 float64_t f64_mul( float64_t a, float64_t b )
 {
     union ui64_f64 uA;
diff --git a/source/f64_mulAdd.c b/source/f64_mulAdd.c
index 13fc382..ed32213 100644
--- a/source/f64_mulAdd.c
+++ b/source/f64_mulAdd.c
@@ -39,6 +39,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include "internals.h"
 #include "softfloat.h"
 
+export
 float64_t f64_mulAdd( float64_t a, float64_t b, float64_t c )
 {
     union ui64_f64 uA;
diff --git a/source/f64_rem.c b/source/f64_rem.c
index ca5350c..2cf5cf1 100644
--- a/source/f64_rem.c
+++ b/source/f64_rem.c
@@ -41,6 +41,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include "specialize.h"
 #include "softfloat.h"
 
+export
 float64_t f64_rem( float64_t a, float64_t b )
 {
     union ui64_f64 uA;
diff --git a/source/f64_roundToInt.c b/source/f64_roundToInt.c
index c5f08ae..0fffe5a 100644
--- a/source/f64_roundToInt.c
+++ b/source/f64_roundToInt.c
@@ -41,6 +41,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include "specialize.h"
 #include "softfloat.h"
 
+export
 float64_t f64_roundToInt( float64_t a, uint_fast8_t roundingMode, bool exact )
 {
     union ui64_f64 uA;
diff --git a/source/f64_sqrt.c b/source/f64_sqrt.c
index f12acdb..69c1e60 100644
--- a/source/f64_sqrt.c
+++ b/source/f64_sqrt.c
@@ -41,6 +41,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include "specialize.h"
 #include "softfloat.h"
 
+export
 float64_t f64_sqrt( float64_t a )
 {
     union ui64_f64 uA;
diff --git a/source/f64_sub.c b/source/f64_sub.c
index 74158be..ed92f22 100644
--- a/source/f64_sub.c
+++ b/source/f64_sub.c
@@ -40,6 +40,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include "internals.h"
 #include "softfloat.h"
 
+export
 float64_t f64_sub( float64_t a, float64_t b )
 {
     union ui64_f64 uA;
diff --git a/source/f64_to_extF80.c b/source/f64_to_extF80.c
index 553ebd0..3195c7e 100644
--- a/source/f64_to_extF80.c
+++ b/source/f64_to_extF80.c
@@ -41,6 +41,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include "specialize.h"
 #include "softfloat.h"
 
+export
 extFloat80_t f64_to_extF80( float64_t a )
 {
     union ui64_f64 uA;
diff --git a/source/f64_to_extF80M.c b/source/f64_to_extF80M.c
index d258bdc..d9033f1 100644
--- a/source/f64_to_extF80M.c
+++ b/source/f64_to_extF80M.c
@@ -43,6 +43,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
 #ifdef SOFTFLOAT_FAST_INT64
 
+export
 void f64_to_extF80M( float64_t a, extFloat80_t *zPtr )
 {
 
@@ -52,6 +53,7 @@ void f64_to_extF80M( float64_t a, extFloat80_t *zPtr )
 
 #else
 
+export
 void f64_to_extF80M( float64_t a, extFloat80_t *zPtr )
 {
     struct extFloat80M *zSPtr;
diff --git a/source/f64_to_f128.c b/source/f64_to_f128.c
index 8f03f2f..0c4205f 100644
--- a/source/f64_to_f128.c
+++ b/source/f64_to_f128.c
@@ -41,6 +41,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include "specialize.h"
 #include "softfloat.h"
 
+export
 float128_t f64_to_f128( float64_t a )
 {
     union ui64_f64 uA;
diff --git a/source/f64_to_f128M.c b/source/f64_to_f128M.c
index e4a862c..878994a 100644
--- a/source/f64_to_f128M.c
+++ b/source/f64_to_f128M.c
@@ -43,6 +43,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
 #ifdef SOFTFLOAT_FAST_INT64
 
+export
 void f64_to_f128M( float64_t a, float128_t *zPtr )
 {
 
@@ -52,6 +53,7 @@ void f64_to_f128M( float64_t a, float128_t *zPtr )
 
 #else
 
+export
 void f64_to_f128M( float64_t a, float128_t *zPtr )
 {
     uint32_t *zWPtr;
diff --git a/source/f64_to_f16.c b/source/f64_to_f16.c
index 0cc6cc5..8fa5e1d 100644
--- a/source/f64_to_f16.c
+++ b/source/f64_to_f16.c
@@ -41,6 +41,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include "specialize.h"
 #include "softfloat.h"
 
+export
 float16_t f64_to_f16( float64_t a )
 {
     union ui64_f64 uA;
diff --git a/source/f64_to_f32.c b/source/f64_to_f32.c
index 6074bb8..bb3fef5 100644
--- a/source/f64_to_f32.c
+++ b/source/f64_to_f32.c
@@ -41,6 +41,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include "specialize.h"
 #include "softfloat.h"
 
+export
 float32_t f64_to_f32( float64_t a )
 {
     union ui64_f64 uA;
diff --git a/source/f64_to_i32.c b/source/f64_to_i32.c
index 2cf2603..6010bde 100644
--- a/source/f64_to_i32.c
+++ b/source/f64_to_i32.c
@@ -41,6 +41,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include "specialize.h"
 #include "softfloat.h"
 
+export
 int_fast32_t f64_to_i32( float64_t a, uint_fast8_t roundingMode, bool exact )
 {
     union ui64_f64 uA;
diff --git a/source/f64_to_i32_r_minMag.c b/source/f64_to_i32_r_minMag.c
index 8cccb8e..617e2bd 100644
--- a/source/f64_to_i32_r_minMag.c
+++ b/source/f64_to_i32_r_minMag.c
@@ -41,6 +41,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include "specialize.h"
 #include "softfloat.h"
 
+export
 int_fast32_t f64_to_i32_r_minMag( float64_t a, bool exact )
 {
     union ui64_f64 uA;
diff --git a/source/f64_to_i64.c b/source/f64_to_i64.c
index 0acf6c2..f242098 100644
--- a/source/f64_to_i64.c
+++ b/source/f64_to_i64.c
@@ -41,6 +41,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include "specialize.h"
 #include "softfloat.h"
 
+export
 int_fast64_t f64_to_i64( float64_t a, uint_fast8_t roundingMode, bool exact )
 {
     union ui64_f64 uA;
diff --git a/source/f64_to_i64_r_minMag.c b/source/f64_to_i64_r_minMag.c
index 4fcc52c..7076a68 100644
--- a/source/f64_to_i64_r_minMag.c
+++ b/source/f64_to_i64_r_minMag.c
@@ -41,6 +41,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include "specialize.h"
 #include "softfloat.h"
 
+export
 int_fast64_t f64_to_i64_r_minMag( float64_t a, bool exact )
 {
     union ui64_f64 uA;
diff --git a/source/f64_to_ui32.c b/source/f64_to_ui32.c
index 4326922..d553233 100644
--- a/source/f64_to_ui32.c
+++ b/source/f64_to_ui32.c
@@ -41,6 +41,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include "specialize.h"
 #include "softfloat.h"
 
+export
 uint_fast32_t f64_to_ui32( float64_t a, uint_fast8_t roundingMode, bool exact )
 {
     union ui64_f64 uA;
diff --git a/source/f64_to_ui32_r_minMag.c b/source/f64_to_ui32_r_minMag.c
index 01758dc..afb968f 100644
--- a/source/f64_to_ui32_r_minMag.c
+++ b/source/f64_to_ui32_r_minMag.c
@@ -41,6 +41,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include "specialize.h"
 #include "softfloat.h"
 
+export
 uint_fast32_t f64_to_ui32_r_minMag( float64_t a, bool exact )
 {
     union ui64_f64 uA;
diff --git a/source/f64_to_ui64.c b/source/f64_to_ui64.c
index e7fb8f6..0832c20 100644
--- a/source/f64_to_ui64.c
+++ b/source/f64_to_ui64.c
@@ -41,6 +41,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include "specialize.h"
 #include "softfloat.h"
 
+export
 uint_fast64_t f64_to_ui64( float64_t a, uint_fast8_t roundingMode, bool exact )
 {
     union ui64_f64 uA;
diff --git a/source/f64_to_ui64_r_minMag.c b/source/f64_to_ui64_r_minMag.c
index e1d81a0..f85c39f 100644
--- a/source/f64_to_ui64_r_minMag.c
+++ b/source/f64_to_ui64_r_minMag.c
@@ -41,6 +41,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include "specialize.h"
 #include "softfloat.h"
 
+export
 uint_fast64_t f64_to_ui64_r_minMag( float64_t a, bool exact )
 {
     union ui64_f64 uA;
diff --git a/source/i32_to_f32.c b/source/i32_to_f32.c
index 4057655..c12a85b 100644
--- a/source/i32_to_f32.c
+++ b/source/i32_to_f32.c
@@ -40,6 +40,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include "internals.h"
 #include "softfloat.h"
 
+export
 float32_t i32_to_f32( int32_t a )
 {
     bool sign;
diff --git a/source/i32_to_f64.c b/source/i32_to_f64.c
index 64662bb..cb09630 100644
--- a/source/i32_to_f64.c
+++ b/source/i32_to_f64.c
@@ -40,6 +40,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include "internals.h"
 #include "softfloat.h"
 
+export
 float64_t i32_to_f64( int32_t a )
 {
     uint_fast64_t uiZ;
diff --git a/source/i64_to_f32.c b/source/i64_to_f32.c
index 391e1ae..d053e1c 100644
--- a/source/i64_to_f32.c
+++ b/source/i64_to_f32.c
@@ -40,6 +40,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include "internals.h"
 #include "softfloat.h"
 
+export
 float32_t i64_to_f32( int64_t a )
 {
     bool sign;
diff --git a/source/i64_to_f64.c b/source/i64_to_f64.c
index 6d26ddc..4670692 100644
--- a/source/i64_to_f64.c
+++ b/source/i64_to_f64.c
@@ -40,6 +40,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include "internals.h"
 #include "softfloat.h"
 
+export
 float64_t i64_to_f64( int64_t a )
 {
     bool sign;
diff --git a/source/ui32_to_f32.c b/source/ui32_to_f32.c
index e74ee7b..b2a6017 100644
--- a/source/ui32_to_f32.c
+++ b/source/ui32_to_f32.c
@@ -39,6 +39,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include "internals.h"
 #include "softfloat.h"
 
+export
 float32_t ui32_to_f32( uint32_t a )
 {
     union ui32_f32 uZ;
diff --git a/source/ui32_to_f64.c b/source/ui32_to_f64.c
index 11050c1..1b80694 100644
--- a/source/ui32_to_f64.c
+++ b/source/ui32_to_f64.c
@@ -39,6 +39,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include "internals.h"
 #include "softfloat.h"
 
+export
 float64_t ui32_to_f64( uint32_t a )
 {
     uint_fast64_t uiZ;
diff --git a/source/ui64_to_f32.c b/source/ui64_to_f32.c
index 9065b92..16f4e4d 100644
--- a/source/ui64_to_f32.c
+++ b/source/ui64_to_f32.c
@@ -39,6 +39,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include "internals.h"
 #include "softfloat.h"
 
+export
 float32_t ui64_to_f32( uint64_t a )
 {
     int_fast8_t shiftDist;
diff --git a/source/ui64_to_f64.c b/source/ui64_to_f64.c
index 4693086..e79e4c2 100644
--- a/source/ui64_to_f64.c
+++ b/source/ui64_to_f64.c
@@ -39,6 +39,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include "internals.h"
 #include "softfloat.h"
 
+export
 float64_t ui64_to_f64( uint64_t a )
 {
     union ui64_f64 uZ;
-- 
2.34.1

