From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: kp2pml30 <kp2pml30@gmail.com>
Date: Tue, 17 Sep 2024 16:22:46 +0400
Subject: [PATCH] improve determinism

---
 derive-impl/src/compile_bytecode.rs | 25 +++++++++++++++----------
 pylib/src/lib.rs                    |  6 +++++-
 2 files changed, 20 insertions(+), 11 deletions(-)

diff --git a/derive-impl/src/compile_bytecode.rs b/derive-impl/src/compile_bytecode.rs
index 6b5baef..a6cc297 100644
--- a/derive-impl/src/compile_bytecode.rs
+++ b/derive-impl/src/compile_bytecode.rs
@@ -19,7 +19,7 @@ use proc_macro2::{Span, TokenStream};
 use quote::quote;
 use rustpython_compiler_core::{bytecode::CodeObject, frozen, Mode};
 use std::{
-    collections::HashMap,
+    collections::BTreeMap,
     env, fs,
     path::{Path, PathBuf},
 };
@@ -85,7 +85,7 @@ impl CompilationSource {
         mode: Mode,
         module_name: String,
         compiler: &dyn Compiler,
-    ) -> Result<HashMap<String, CompiledModule>, Diagnostic> {
+    ) -> Result<BTreeMap<String, CompiledModule>, Diagnostic> {
         match &self.kind {
             CompilationSourceKind::Dir(rel_path) => self.compile_dir(
                 &CARGO_MANIFEST_DIR.join(rel_path),
@@ -93,12 +93,14 @@ impl CompilationSource {
                 mode,
                 compiler,
             ),
-            _ => Ok(hashmap! {
-                module_name.clone() => CompiledModule {
-                    code: self.compile_single(mode, module_name, compiler)?,
-                    package: false,
-                },
-            }),
+            _ => Ok(BTreeMap::from(
+                [
+                    (module_name.clone(), CompiledModule {
+                        code: self.compile_single(mode, module_name, compiler)?,
+                        package: false,
+                    })
+                ]
+            )),
         }
     }
 
@@ -136,8 +138,8 @@ impl CompilationSource {
         parent: String,
         mode: Mode,
         compiler: &dyn Compiler,
-    ) -> Result<HashMap<String, CompiledModule>, Diagnostic> {
-        let mut code_map = HashMap::new();
+    ) -> Result<BTreeMap<String, CompiledModule>, Diagnostic> {
+        let mut code_map = BTreeMap::new();
         let paths = fs::read_dir(path)
             .or_else(|e| {
                 if cfg!(windows) {
@@ -158,6 +160,9 @@ impl CompilationSource {
             let file_name = path.file_name().unwrap().to_str().ok_or_else(|| {
                 Diagnostic::spans_error(self.span, format!("Invalid UTF-8 in file name {path:?}"))
             })?;
+            if file_name == "test" {
+                continue;
+            }
             if path.is_dir() {
                 code_map.extend(self.compile_dir(
                     &path,
diff --git a/pylib/src/lib.rs b/pylib/src/lib.rs
index f8a47ba..9c787f8 100644
--- a/pylib/src/lib.rs
+++ b/pylib/src/lib.rs
@@ -6,7 +6,11 @@
 // so build.rs sets this env var
 pub const LIB_PATH: &str = match option_env!("win_lib_path") {
     Some(s) => s,
-    None => concat!(env!("CARGO_MANIFEST_DIR"), "/Lib"),
+    None => if cfg!(feature = "freeze-stdlib") {
+        "/builtin"
+    } else {
+        concat!(env!("CARGO_MANIFEST_DIR"), "/Lib")
+    },
 };
 
 #[cfg(feature = "freeze-stdlib")]
-- 
2.34.1

