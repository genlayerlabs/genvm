From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: kp2pml30 <kp2pml30@gmail.com>
Date: Mon, 23 Sep 2024 11:57:03 +0400
Subject: [PATCH] add reference views

---
 crates/environ/src/tunables.rs         |  3 --
 crates/wiggle/generate/src/wasmtime.rs | 44 +++++++++++++++++++++++---
 2 files changed, 40 insertions(+), 7 deletions(-)

diff --git a/crates/environ/src/tunables.rs b/crates/environ/src/tunables.rs
index 9c5f60f..f903a9a 100644
--- a/crates/environ/src/tunables.rs
+++ b/crates/environ/src/tunables.rs
@@ -120,11 +120,8 @@ impl Tunables {
             debug_adapter_modules: false,
             relaxed_simd_deterministic: false,
             winch_callable: false,
-<<<<<<< HEAD
             signals_based_traps: true,
-=======
             floats_enabled: true,
->>>>>>> 1437e7a (add deterministic mode)
         }
     }
 
diff --git a/crates/wiggle/generate/src/wasmtime.rs b/crates/wiggle/generate/src/wasmtime.rs
index cb488f9..ae4ab3c 100644
--- a/crates/wiggle/generate/src/wasmtime.rs
+++ b/crates/wiggle/generate/src/wasmtime.rs
@@ -2,6 +2,7 @@ use crate::config::Asyncness;
 use crate::funcs::func_bounds;
 use crate::names;
 use crate::CodegenSettings;
+use heck::ToUpperCamelCase;
 use proc_macro2::{Ident, Span, TokenStream};
 use quote::{format_ident, quote};
 use std::collections::HashSet;
@@ -46,6 +47,29 @@ pub fn link_module(
         format_ident!("add_{}_to_linker", module_ident)
     };
 
+    // comment to minimize delta
+    let ctx_ref_type = module.docs.contains("@CONTEXT_REF_TYPE@");
+    if ctx_ref_type {
+        let trait_name = if target_path.is_none() {
+            format_ident!("AddToLinkerFn")
+        } else {
+            format_ident!("Add{}ToLinkerFn", module.name.as_str().to_upper_camel_case())
+        };
+        return quote! {
+            pub trait #trait_name<T> {
+                fn call<'a>(&self, arg: &'a mut T) -> impl #ctx_bound #send_bound;
+            }
+            /// Adds all instance items to the specified `Linker`.
+            pub fn #func_name<T>(
+                linker: &mut wiggle::wasmtime_crate::Linker<T>,
+                get_cx: impl #trait_name<T> + Send + Sync + Copy + 'static,
+            ) -> wiggle::anyhow::Result<()>{
+                #(#bodies)*
+                Ok(())
+            }
+        }
+    }
+
     let u = if settings.mutable {
         quote!(&mut U)
     } else {
@@ -113,21 +137,33 @@ fn generate_func(
         quote!( #field_ident )
     };
 
+    let ctx_ref_type = module.docs.contains("@CONTEXT_REF_TYPE@");
+    let get_cx = if ctx_ref_type {
+        quote! {get_cx.call}
+    } else {
+        quote! {get_cx}
+    };
+    let cx_ref = if ctx_ref_type {
+        quote! {&mut}
+    } else {
+        quote! {}
+    };
+
     let body = quote! {
         let export = caller.get_export("memory");
-        let (mut mem, ctx) = match &export {
+        let (mut mem, mut ctx) = match &export {
             Some(wiggle::wasmtime_crate::Extern::Memory(m)) => {
                 let (mem, ctx) = m.data_and_store_mut(&mut caller);
-                let ctx = get_cx(ctx);
+                let ctx = #get_cx(ctx);
                 (wiggle::GuestMemory::Unshared(mem), ctx)
             }
             Some(wiggle::wasmtime_crate::Extern::SharedMemory(m)) => {
-                let ctx = get_cx(caller.data_mut());
+                let ctx = #get_cx(caller.data_mut());
                 (wiggle::GuestMemory::Shared(m.data()), ctx)
             }
             _ => wiggle::anyhow::bail!("missing required memory export"),
         };
-        Ok(<#ret_ty>::from(#abi_func(ctx, &mut mem #(, #arg_names)*) #await_ ?))
+        Ok(<#ret_ty>::from(#abi_func(#cx_ref ctx, &mut mem #(, #arg_names)*) #await_ ?))
     };
 
     match asyncness {
