From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: kp2pml30 <kp2pml30@gmail.com>
Date: Thu, 14 Nov 2024 18:33:41 +0400
Subject: [PATCH] add graceful shutdown

---
 cranelift/wasm/src/environ/spec.rs          |  3 +++
 crates/cranelift/src/func_environ.rs        | 26 ++++++++++++++++++++-
 crates/environ/src/vmoffsets.rs             |  5 ++++
 crates/wasmtime/src/runtime/store.rs        | 16 ++++++++-----
 crates/wasmtime/src/runtime/vm/vmcontext.rs |  3 +++
 5 files changed, 46 insertions(+), 7 deletions(-)

diff --git a/cranelift/wasm/src/environ/spec.rs b/cranelift/wasm/src/environ/spec.rs
index e3868ef..662e66d 100644
--- a/cranelift/wasm/src/environ/spec.rs
+++ b/cranelift/wasm/src/environ/spec.rs
@@ -621,6 +621,9 @@ pub trait FuncEnvironment: TargetEnvironment {
         Ok(())
     }
 
+    /// check for shutdown
+    fn check_graceful_shutdown(&mut self, builder: &mut FunctionBuilder<'_>);
+
     /// Optional callback for the `FunctionEnvironment` performing this translation to perform work
     /// before the function body is translated.
     fn before_translate_function(
diff --git a/crates/cranelift/src/func_environ.rs b/crates/cranelift/src/func_environ.rs
index a8cf961..5367e31 100644
--- a/crates/cranelift/src/func_environ.rs
+++ b/crates/cranelift/src/func_environ.rs
@@ -2814,6 +2814,14 @@ impl<'module_environment> cranelift_wasm::FuncEnvironment for FuncEnvironment<'m
         if self.tunables.consume_fuel && state.reachable() {
             self.fuel_after_op(op, builder);
         }
+        if state.reachable() {
+            match op {
+                Operator::Loop {..} => {
+                    self.check_graceful_shutdown(builder);
+                }
+                _ => {}
+            }
+        }
         Ok(())
     }
 
@@ -2828,6 +2836,20 @@ impl<'module_environment> cranelift_wasm::FuncEnvironment for FuncEnvironment<'m
         Ok(())
     }
 
+    fn check_graceful_shutdown(&mut self, builder: &mut FunctionBuilder<'_>) {
+        debug_assert!(!self.vmruntime_limits_ptr.is_reserved_value());
+
+        let off = i32::from(self.offsets.ptr.vmruntime_limits_should_quit_bool());
+        let ptr = builder.ins().load(self.pointer_type(), ir::MemFlags::trusted(), self.vmruntime_limits_ptr, Offset32::new(off));
+        let loaded = builder.ins().atomic_load(ir::types::I32, ir::MemFlags::trusted(), ptr);
+
+        if self.signals_based_traps() {
+            builder.ins().trapnz(loaded, ir::TrapCode::Interrupt);
+        } else {
+            self.conditionally_trap(builder, loaded, ir::TrapCode::Interrupt);
+        }
+    }
+
     fn before_translate_function(
         &mut self,
         builder: &mut FunctionBuilder,
@@ -2844,7 +2866,7 @@ impl<'module_environment> cranelift_wasm::FuncEnvironment for FuncEnvironment<'m
 
         // If the `vmruntime_limits_ptr` variable will get used then we initialize
         // it here.
-        if self.tunables.consume_fuel || self.tunables.epoch_interruption {
+        if true || self.tunables.consume_fuel || self.tunables.epoch_interruption {
             self.declare_vmruntime_limits_ptr(builder);
         }
         // Additionally we initialize `fuel_var` if it will get used.
@@ -2856,6 +2878,8 @@ impl<'module_environment> cranelift_wasm::FuncEnvironment for FuncEnvironment<'m
             self.epoch_function_entry(builder);
         }
 
+        self.check_graceful_shutdown(builder);
+
         #[cfg(feature = "wmemcheck")]
         if self.wmemcheck {
             let func_name = self.current_func_name(builder);
diff --git a/crates/environ/src/vmoffsets.rs b/crates/environ/src/vmoffsets.rs
index c6c354d..4fd9e12 100644
--- a/crates/environ/src/vmoffsets.rs
+++ b/crates/environ/src/vmoffsets.rs
@@ -178,6 +178,11 @@ pub trait PtrSize {
         self.vmruntime_limits_last_wasm_exit_pc() + self.size()
     }
 
+    /// field to check boolean
+    fn vmruntime_limits_should_quit_bool(&self) -> u8 {
+        self.vmruntime_limits_last_wasm_entry_sp() + self.size()
+    }
+
     // Offsets within `VMMemoryDefinition`
 
     /// The offset of the `base` field.
diff --git a/crates/wasmtime/src/runtime/store.rs b/crates/wasmtime/src/runtime/store.rs
index bf21c4a..03b3e66 100644
--- a/crates/wasmtime/src/runtime/store.rs
+++ b/crates/wasmtime/src/runtime/store.rs
@@ -309,6 +309,8 @@ pub struct StoreOpaque {
     // within a `Store`.
     _marker: marker::PhantomPinned,
 
+    genvm_ctx: Arc<std::sync::atomic::AtomicU32>,
+
     engine: Engine,
     runtime_limits: VMRuntimeLimits,
     instances: Vec<StoreInstance>,
@@ -527,12 +529,13 @@ impl<T> Store<T> {
     /// The store will limit the number of instances, linear memories, and
     /// tables created to 10,000. This can be overridden with the
     /// [`Store::limiter`] configuration method.
-    pub fn new(engine: &Engine, data: T) -> Self {
+    pub fn new(engine: &Engine, data: T, genvm_ctx: Arc<std::sync::atomic::AtomicU32>) -> Self {
         let pkey = engine.allocator().next_available_pkey();
 
         let mut inner = Box::new(StoreInner {
             inner: StoreOpaque {
                 _marker: marker::PhantomPinned,
+                genvm_ctx,
                 engine: engine.clone(),
                 runtime_limits: Default::default(),
                 instances: Vec::new(),
@@ -577,6 +580,7 @@ impl<T> Store<T> {
             epoch_deadline_behavior: None,
             data: ManuallyDrop::new(data),
         });
+        inner.runtime_limits.should_quit_bool = core::cell::UnsafeCell::new(inner.genvm_ctx.as_ptr() as usize);
 
         // Wasmtime uses the callee argument to host functions to learn about
         // the original pointer to the `Store` itself, allowing it to
@@ -2704,11 +2708,11 @@ impl<T> StoreInner<T> {
     }
 }
 
-impl<T: Default> Default for Store<T> {
-    fn default() -> Store<T> {
-        Store::new(&Engine::default(), T::default())
-    }
-}
+//impl<T: Default> Default for Store<T> {
+//    fn default() -> Store<T> {
+//        Store::new(&Engine::default(), T::default())
+//    }
+//}
 
 impl<T: fmt::Debug> fmt::Debug for Store<T> {
     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
diff --git a/crates/wasmtime/src/runtime/vm/vmcontext.rs b/crates/wasmtime/src/runtime/vm/vmcontext.rs
index 26e72a8..6dc83c3 100644
--- a/crates/wasmtime/src/runtime/vm/vmcontext.rs
+++ b/crates/wasmtime/src/runtime/vm/vmcontext.rs
@@ -813,6 +813,8 @@ pub struct VMRuntimeLimits {
     /// Used to find the end of a contiguous sequence of Wasm frames when
     /// walking the stack.
     pub last_wasm_entry_sp: UnsafeCell<usize>,
+
+    pub should_quit_bool: UnsafeCell<usize>,
 }
 
 // The `VMRuntimeLimits` type is a pod-type with no destructor, and we don't
@@ -831,6 +833,7 @@ impl Default for VMRuntimeLimits {
             last_wasm_exit_fp: UnsafeCell::new(0),
             last_wasm_exit_pc: UnsafeCell::new(0),
             last_wasm_entry_sp: UnsafeCell::new(0),
+            should_quit_bool: UnsafeCell::new(0),
         }
     }
 }
-- 
2.34.1

