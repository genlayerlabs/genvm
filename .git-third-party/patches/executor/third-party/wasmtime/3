From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: kp2pml30 <kp2pml30@gmail.com>
Date: Thu, 22 Aug 2024 13:09:30 +0400
Subject: [PATCH] fix bug with runtime-disallowed floats and fuel consumption

---
 cranelift/wasm/src/code_translator.rs | 1 +
 cranelift/wasm/src/environ/spec.rs    | 3 +++
 crates/cranelift/src/func_environ.rs  | 6 ++++++
 3 files changed, 10 insertions(+)

diff --git a/cranelift/wasm/src/code_translator.rs b/cranelift/wasm/src/code_translator.rs
index dfed7ac..92e3a06 100644
--- a/cranelift/wasm/src/code_translator.rs
+++ b/cranelift/wasm/src/code_translator.rs
@@ -3872,6 +3872,7 @@ fn float_op_unreachable_check<FE: FuncEnvironment + ?Sized>(environ: &mut FE, bu
     if environ.are_floats_enabled() {
         return false;
     }
+    environ.fuel_before_unreachable(builder);
     builder.ins().trap(ir::TrapCode::DeterministicMode);
     state.reachable = false;
     return true;
diff --git a/cranelift/wasm/src/environ/spec.rs b/cranelift/wasm/src/environ/spec.rs
index e281d0d..e3868ef 100644
--- a/cranelift/wasm/src/environ/spec.rs
+++ b/cranelift/wasm/src/environ/spec.rs
@@ -96,6 +96,9 @@ pub trait FuncEnvironment: TargetEnvironment {
     /// Does the given result require inclusion in stack maps?
     fn sig_ref_result_needs_stack_map(&self, sig_ref: ir::SigRef, index: usize) -> bool;
 
+    /// Updates fuel right before reaching unreachable state
+    fn fuel_before_unreachable(&mut self, builder: &mut FunctionBuilder);
+
     /// Does the given result require inclusion in stack maps?
     fn func_ref_result_needs_stack_map(
         &self,
diff --git a/crates/cranelift/src/func_environ.rs b/crates/cranelift/src/func_environ.rs
index a62c9b3..0477d05 100644
--- a/crates/cranelift/src/func_environ.rs
+++ b/crates/cranelift/src/func_environ.rs
@@ -2990,6 +2990,7 @@ impl<'module_environment> cranelift_wasm::FuncEnvironment for FuncEnvironment<'m
         }
     }
 
+<<<<<<< HEAD
 <<<<<<< HEAD
     fn isa(&self) -> &dyn TargetIsa {
         &*self.isa
@@ -3145,6 +3146,11 @@ impl<'module_environment> cranelift_wasm::FuncEnvironment for FuncEnvironment<'m
         }
     }
 
+    fn fuel_before_unreachable(&mut self, builder: &mut FunctionBuilder) {
+        self.fuel_increment_var(builder);
+        self.fuel_save_from_var(builder);
+    }
+
     fn are_floats_enabled(&self) -> bool {
         return self.tunables.floats_enabled;
     }
