{
  "$id": "https://raw.githubusercontent.com/yeagerai/genvm/refs/heads/main/doc/schemas/default-config.json",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "GenVM configuration",
  "genvm": {
    "allOf": [
      {
        "$ref": "#/definitions/base-conf"
      },
      {
        "type": "object",
        "properties": {
          "modules": {
            "type": "object",
            "properties": {
              "web": { "$ref": "#/definitions/genvm-module-conf" },
              "llm": { "$ref": "#/definitions/genvm-module-conf" }
            },
            "required": ["web", "llm"]
          }
        },
        "required": ["modules"]
      }
    ]
  },
  "llm": {
    "allOf": [
      {
        "$ref": "#/definitions/base-conf"
      },
      {
        "$ref": "#/definitions/base-module-conf"
      },
      {
        "type": "object",
        "properties": {
          "backends": {
            "type": "object",
            "description": "all available backends",
            "patternProperties": {
              "": {
                "type": "object",
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "default": true,
                    "description": "set to false to ignore this backend"
                  },
                  "host": {
                    "type": "string",
                    "description": "host to connect to",
                    "format": "uri",
                    "examples": [
                      "https://api.openai.com",
                      "https://llm-gateway.heurist.xyz",
                      "https://api.anthropic.com",
                      "https://api.x.ai",
                      "https://generativelanguage.googleapis.com",
                      "https://api.atoma.network"
                    ]
                  },
                  "key": {
                    "type": "string",
                    "description": "api key",
                    "examples": ["sk-proj-...", "${ENV[APIKEY]}"]
                  },
                  "provider": {
                    "enum": [
                      "openai-compatible",
                      "ollama",
                      "simulator",
                      "anthropic",
                      "google"
                    ],
                    "description": "provider id identifier"
                  },
                  "models": {
                    "type": "object",
                    "patternProperties": {
                      "": {
                        "type": "object",
                        "properties": {
                          "enabled": {
                            "type": "boolean",
                            "default": true
                          },
                          "supports_json": {
                            "type": "boolean",
                            "default": false
                          },
                          "supports_image": {
                            "type": "boolean",
                            "default": false
                          },
                          "use_max_completion_tokens": {
                            "type": "boolean",
                            "default": false,
                            "description": "use max_completion_tokens instead of max_tokens for openai-compatible provider"
                          },
                          "meta": {
                            "type": ["object", "null"],
                            "default": null
                          }
                        },
                        "additionalProperties": false
                      }
                    }
                  }
                },
                "required": ["host", "key", "provider", "models"],
                "additionalProperties": false
              }
            }
          },
          "prompt_templates": {
            "type": "object",
            "properties": {
              "eq_comparative": {
                "$ref": "#/definitions/llm-template-conf",
                "description": "must include #{leader_answer} #{validator_answer} #{principle} for templating"
              },
              "eq_non_comparative_leader": {
                "$ref": "#/definitions/llm-template-conf",
                "description": "must include #{task} #{criteria} #{input} for templating"
              },
              "eq_non_comparative_validator": {
                "$ref": "#/definitions/llm-template-conf",
                "description": "must include #{task} #{criteria} #{input} #{output} for templating"
              }
            },
            "required": [
              "eq_comparative",
              "eq_non_comparative_leader",
              "eq_non_comparative_validator"
            ],
            "additionalProperties": false
          }
        }
      }
    ]
  },
  "web": {
    "allOf": [
      {
        "$ref": "#/definitions/base-conf"
      },
      {
        "$ref": "#/definitions/base-module-conf"
      },
      {
        "type": "object",
        "properties": {
          "webdriver_host": {
            "type": "string",
            "format": "uri",
            "description": "uri of webdriver to connect to",
            "examples": [
              "http://127.0.0.1:4444"
            ]
          },
          "session_create_request": {
            "type": "string",
            "description": "raw json that will be sent to webdriver for creating a session"
          },
          "extra_tld": {
            "type": "array",
            "items": { "type": "string" },
            "description": "extra top-level domains to allow (ones that come after last `.`)"
          },
          "always_allow_hosts": {
            "type": "array",
            "items": { "type": "string" },
            "description": "hosts for which all ports are allowed"
          }
        }
      }
    ]
  },
  "definitions": {
    "llm-template-conf": {
      "type": "object",
      "properties": {
        "system": {"type": "string"},
        "user": {"type": "string"}
      }
    },
    "genvm-module-conf": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string",
          "format": "uri",
          "description": "module address that accepts connection",
          "examples": [
            "ws://127.0.0.1:3031"
          ]
        }
      },
      "required": ["address"]
    },
    "base-module-conf": {
      "type": "object",
      "properties": {
        "bind_address": {
            "type": "string",
            "description": "address to listen on",
            "format": "uri",
            "examples": [
              "127.0.0.1:3032"
            ]
        },
        "lua_script_path": {
            "type": "string",
            "description": "path to script"
        },
        "vm_count": {
            "type": "integer",
            "description": "amount of lua vm to create",
            "minimum": 1
        },
        "extra_lua_path": {
            "type": "string",
            "description": "extra lua path to search for modules",
            "default": "",
            "examples": [
              "/etc/a/?.lua;/etc/b/init.lua"
            ]
        },
        "signer_url": {
            "type": "string",
            "description": "url of the signer service to use for signing requests, can have ${node_address} and other interpolations, present in --host-arg",
            "examples": [
              "localhost:${node_port}/genvm/sign"
            ]
        },
        "signer_headers": {
            "type": "object",
            "description": "headers to send with signer requests, can have ${node_address} and other interpolations, present in --host-arg",
            "additionalProperties": {
              "type": "string"
            },
            "default": {}
        }
      },
      "required": ["bind_address", "lua_script_path", "vm_count"]
    },
    "base-conf": {
      "type": "object",
      "properties": {
          "threads": {
            "type": "number",
            "exclusiveMinimum": 1,
            "description": "amount of native threads on which coroutines run"
          },
          "blocking_threads": {
            "type": "number",
            "exclusiveMinimum": 1,
            "description": "set to same relatively large number, they will be idle for most of the time"
          },
          "log_disable": { "type": "string" },
          "log_level": {
            "enum": ["trace", "debug", "info", "warning", "error", "off"]
          }
      },
      "required": ["threads", "blocking_threads", "log_disable"]
    }
  }
}
